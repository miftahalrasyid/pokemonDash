{"ast":null,"code":"var _jsxFileName = \"/Users/miftahalrasyid/Documents/kerja/personal/Tokopedia/pokeman/src/PokemonList/PokemonList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport PokemonCard, { Container } from \"./PokemonCard\";\nimport \"./PokemonList.css\";\nimport { Link } from \"react-router-dom\";\nimport { gql, useQuery } from '@apollo/client'; // const Test = (data) =>{\n//     return <h3>test</h3>\n// }\n// window.addEventListener(\"beforeunload\", function(){\n//     localStorage.removeItem(\"myKey\");\n// });\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_POKEMONS = gql`\n  query pokemons($limit: Int, $offset: Int) {\n    pokemons(limit: $limit, offset: $offset) {\n      count\n      next\n      previous\n      status\n      message\n      results {\n        url\n        name\n        image\n      }\n    }\n  }\n`;\nconst gqlVariables = {\n  limit: 2,\n  offset: 1\n};\nexport const PokemonList = () => {\n  _s();\n\n  const FETCH_LIMIT = 20;\n  let data1 = [];\n  const smartscroll = React.useRef(null);\n  const [offset, setOffset] = React.useState(0);\n  const [limit, setLimit] = React.useState(FETCH_LIMIT);\n  const [apoloData, setApoloData] = React.useState([]);\n  const [dataFetch, setDataFetch] = React.useState(JSON.parse(sessionStorage['myKey'] || '[]')); // const [dataFetch,setDataFetch] = React.useState(JSON.parse(localStorage['myKey'] || '[]'));\n  // const [dataFetch,setDataFetch] = React.useState( []);\n\n  const [scrollFetch, setScrollFetch] = React.useState(false); // const [populate,setPopulate] = React.useState([<Test/>]);\n  // var data2 = []\n  // const Populate = () =>{\n  //     return(populate)\n  // }\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_POKEMONS, {\n    variables: gqlVariables\n  }); // if (loading) return 'Loading...';\n  // if (error) return `Error! ${error.message}`;\n\n  console.log('Response from server', data);\n  React.useEffect(() => {\n    setApoloData(data);\n    console.log(apoloData);\n    console.log(data.pokemons);\n  }, [data]);\n  React.useEffect(() => {\n    var _document$querySelect, _document$querySelect2, _document$querySelect3, _document$querySelect4;\n\n    // console.log(document.querySelector(\".content\").scrollTop)\n    console.log(sessionStorage['myScroll']);\n    document.querySelector(\".content\").scrollTop = parseInt(((_document$querySelect = document.querySelector(\"#\" + sessionStorage['myScroll'])) === null || _document$querySelect === void 0 ? void 0 : (_document$querySelect2 = _document$querySelect.getBoundingClientRect()) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.y) || 0);\n    console.log(((_document$querySelect3 = document.querySelector(\"#\" + sessionStorage['myScroll'])) === null || _document$querySelect3 === void 0 ? void 0 : (_document$querySelect4 = _document$querySelect3.getBoundingClientRect()) === null || _document$querySelect4 === void 0 ? void 0 : _document$querySelect4.y) || 0 - parseInt(window.innerHeight)); // console.log(parseInt(document.querySelector(\".content\").scrollTop)-parseInt(window.innerHeight))\n\n    document.querySelector(\".content\").scrollTop = parseInt(document.querySelector(\".content\").scrollTop) - parseInt(window.innerHeight) / 4; // smartscroll.scrollTop = sessionStorage['myScroll'];\n  }, []);\n  React.useEffect(() => {\n    fetch(`https://pokeapi.co/api/v2/pokemon/?offset=${offset}&limit=${limit}`).then(res => res.json()).then(data => {\n      // console.log(dataFetch)\n      // data1 = [...dataFetch,...data.results];\n      let data1 = []; // console.log(dataFetch.length < limit)\n      // console.log(sessionStorage['myKey'])\n\n      if (limit > dataFetch.length) {\n        data1 = [...dataFetch, ...data.results];\n        setDataFetch(data1);\n        sessionStorage['myKey'] = JSON.stringify(data1);\n      } // console.log(JSON.parse(sessionStorage['myKey'] || '[]'))\n      // console.log(dataFetch)\n      // localStorage.clear();\n      // sessionStorage.clear();\n      // let distinct = [...new Set(data1.map(a=>a.name))];\n      // sessionStorage['myKey'] = JSON.stringify(distinct);\n      // console.log(JSON.parse(localStorage['myKey']))\n      // console.log(data1)\n      // setDataFetch([...dataFetch, data.results]);\n\n\n      setScrollFetch(true);\n    });\n  }, [limit]); // },[scrollFetch])\n  // React.useEffect(()=>{\n  //     // var card = <PokemonCard dataset={data.name}/>\n  //     for(let i=0; i<dataFetch.length; i++){\n  //         data2 = [...data2,<PokemonCard {...dataFetch[i]}/>];\n  //         // data2 = [...data2,<PokemonCard dataset={data.name}/>];\n  //     }\n  //     setPopulate(data2);\n  //     // Populate({pokemondata: data2})\n  //     console.log(dataFetch)\n  // },[dataFetch])\n\n  const onPageScroll = ev => {\n    // console.log(sessionStorage['myScroll'])\n    // console.log(document.querySelector(\"#\"+sessionStorage['myScroll']))\n    // console.log(ev)\n\n    /**scroll value */\n    // console.log(ev.target.scrollTop)\n    // ev.target.scrollTop = parseInt(ev.target.scrollTop)-parseInt(window.innerHeight)\n\n    /**scroll position */\n    // sessionStorage['myScroll'] = ev.target.scrollTop ;\n    // console.log(sessionStorage['myScroll']) ;\n\n    /** available scroll */\n    // console.log(ev.target.scrollHeight-ev.target.offsetHeight)\n    // console.log((ev.target.scrollHeight-ev.target.offsetHeight)/2)\n    if (ev.target.scrollTop > (ev.target.scrollHeight - ev.target.offsetHeight) / 2 && scrollFetch) {\n      // let \n      // fetch(\"https://pokeapi.co/api/v2/pokemon/?offset=0&limit=50\")\n      // .then(res=>res.json())\n      // .then(data=>setDataFetch(data.results));\n      setOffset(offset + FETCH_LIMIT);\n      setLimit(limit + FETCH_LIMIT);\n      setScrollFetch(false);\n    }\n  }; // console.log(Container)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pokedex\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"PokeDex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"content\",\n      ref: smartscroll,\n      onScroll: onPageScroll,\n      children: dataFetch.map((item, idx) => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(PokemonCard, { ...item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PokemonList, \"lGzO3fjQhk2Gp+R2WASokfuqFKI=\", false, function () {\n  return [useQuery];\n});\n\n_c = PokemonList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PokemonList\");","map":{"version":3,"sources":["/Users/miftahalrasyid/Documents/kerja/personal/Tokopedia/pokeman/src/PokemonList/PokemonList.js"],"names":["React","PokemonCard","Container","Link","gql","useQuery","GET_POKEMONS","gqlVariables","limit","offset","PokemonList","FETCH_LIMIT","data1","smartscroll","useRef","setOffset","useState","setLimit","apoloData","setApoloData","dataFetch","setDataFetch","JSON","parse","sessionStorage","scrollFetch","setScrollFetch","loading","error","data","variables","console","log","useEffect","pokemons","document","querySelector","scrollTop","parseInt","getBoundingClientRect","y","window","innerHeight","fetch","then","res","json","length","results","stringify","onPageScroll","ev","target","scrollHeight","offsetHeight","map","item","idx"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PokemonCard,{Container} from \"./PokemonCard\";\nimport \"./PokemonList.css\";\nimport {Link} from \"react-router-dom\";\nimport { gql, useQuery } from '@apollo/client';\n// const Test = (data) =>{\n//     return <h3>test</h3>\n// }\n// window.addEventListener(\"beforeunload\", function(){\n//     localStorage.removeItem(\"myKey\");\n// });\nconst GET_POKEMONS = gql`\n  query pokemons($limit: Int, $offset: Int) {\n    pokemons(limit: $limit, offset: $offset) {\n      count\n      next\n      previous\n      status\n      message\n      results {\n        url\n        name\n        image\n      }\n    }\n  }\n`;\nconst gqlVariables = {\n    limit: 2,\n    offset: 1,\n  };\nexport const PokemonList = () => {\n\n    const FETCH_LIMIT = 20;\n    let data1 = []\n    const smartscroll = React.useRef(null);\n    const [offset, setOffset] = React.useState(0);\n    const [limit, setLimit] = React.useState(FETCH_LIMIT);\n    const [apoloData,setApoloData] = React.useState([]);\n    const [dataFetch,setDataFetch] = React.useState(JSON.parse(sessionStorage['myKey'] || '[]'));\n    // const [dataFetch,setDataFetch] = React.useState(JSON.parse(localStorage['myKey'] || '[]'));\n    // const [dataFetch,setDataFetch] = React.useState( []);\n    const [scrollFetch,setScrollFetch] = React.useState(false);\n    // const [populate,setPopulate] = React.useState([<Test/>]);\n    // var data2 = []\n    // const Populate = () =>{\n    //     return(populate)\n    // }\n    const { loading, error, data } = useQuery(GET_POKEMONS, {\n        variables: gqlVariables,\n    });\n    // if (loading) return 'Loading...';\n    // if (error) return `Error! ${error.message}`;\n    console.log('Response from server', data);\n    React.useEffect(()=>{\n        setApoloData(data);\n        console.log(apoloData)\n        console.log(data.pokemons)\n    },[data])\n    \n    React.useEffect(()=>{\n        \n        // console.log(document.querySelector(\".content\").scrollTop)\n        console.log(sessionStorage['myScroll'])\n        document.querySelector(\".content\").scrollTop = parseInt(document.querySelector(\"#\"+sessionStorage['myScroll'])?.getBoundingClientRect()?.y || 0);\n        console.log(document.querySelector(\"#\"+sessionStorage['myScroll'])?.getBoundingClientRect()?.y || 0 -parseInt(window.innerHeight))\n        // console.log(parseInt(document.querySelector(\".content\").scrollTop)-parseInt(window.innerHeight))\n        document.querySelector(\".content\").scrollTop = parseInt(document.querySelector(\".content\").scrollTop)-parseInt(window.innerHeight)/4;\n        // smartscroll.scrollTop = sessionStorage['myScroll'];\n    },[]);\n    React.useEffect(()=>{\n        fetch(`https://pokeapi.co/api/v2/pokemon/?offset=${offset}&limit=${limit}`)\n        .then(res=>res.json())\n        .then(data=>{\n            // console.log(dataFetch)\n            // data1 = [...dataFetch,...data.results];\n            let data1 = []; \n            // console.log(dataFetch.length < limit)\n            // console.log(sessionStorage['myKey'])\n            if(limit > dataFetch.length){\n                data1 = [...dataFetch,...data.results]\n                setDataFetch(data1);\n                sessionStorage['myKey'] = JSON.stringify(data1);\n            }\n            // console.log(JSON.parse(sessionStorage['myKey'] || '[]'))\n            // console.log(dataFetch)\n\n            // localStorage.clear();\n            // sessionStorage.clear();\n            // let distinct = [...new Set(data1.map(a=>a.name))];\n            // sessionStorage['myKey'] = JSON.stringify(distinct);\n        // console.log(JSON.parse(localStorage['myKey']))\n\n            // console.log(data1)\n            // setDataFetch([...dataFetch, data.results]);\n            setScrollFetch(true);\n        });\n    },[limit])\n    // },[scrollFetch])\n  \n    // React.useEffect(()=>{\n    //     // var card = <PokemonCard dataset={data.name}/>\n    //     for(let i=0; i<dataFetch.length; i++){\n    //         data2 = [...data2,<PokemonCard {...dataFetch[i]}/>];\n    //         // data2 = [...data2,<PokemonCard dataset={data.name}/>];\n    //     }\n    //     setPopulate(data2);\n    //     // Populate({pokemondata: data2})\n    //     console.log(dataFetch)\n    // },[dataFetch])\n    const onPageScroll = (ev) => {\n        // console.log(sessionStorage['myScroll'])\n        // console.log(document.querySelector(\"#\"+sessionStorage['myScroll']))\n        // console.log(ev)\n        /**scroll value */\n        // console.log(ev.target.scrollTop)\n        // ev.target.scrollTop = parseInt(ev.target.scrollTop)-parseInt(window.innerHeight)\n        /**scroll position */\n        // sessionStorage['myScroll'] = ev.target.scrollTop ;\n        // console.log(sessionStorage['myScroll']) ;\n        /** available scroll */\n        // console.log(ev.target.scrollHeight-ev.target.offsetHeight)\n        // console.log((ev.target.scrollHeight-ev.target.offsetHeight)/2)\n        if(ev.target.scrollTop > (ev.target.scrollHeight-ev.target.offsetHeight)/2 && scrollFetch){\n            // let \n            // fetch(\"https://pokeapi.co/api/v2/pokemon/?offset=0&limit=50\")\n            // .then(res=>res.json())\n            // .then(data=>setDataFetch(data.results));\n            setOffset(offset+FETCH_LIMIT);\n            setLimit(limit+FETCH_LIMIT);\n            setScrollFetch(false);\n\n        }\n    };\n    // console.log(Container)\n    return(\n        <div className=\"pokedex\">\n        <h1 className=\"title\">PokeDex</h1>\n        {/* <div className=\"main-header\">\n          <nav>\n            <ul>\n              <li><Link to=\"/\"><img src=\"/images/pokeball.png\" alt=\"pokeball\"/></Link></li>\n              \n              <li><Link to=\"/my-pokemon\">My Pokemon</Link></li>\n            </ul>\n          </nav>\n        </div> */}\n        <section className=\"content\" ref={smartscroll} onScroll={onPageScroll}>\n            {dataFetch.map((item,idx)=>{\n                return(\n                    <React.Fragment key={idx}>\n                        <PokemonCard {...item} />\n                        {/* <hr/> */}\n                    </React.Fragment>\n                )\n            })}\n        </section>\n        {/* <Populate/> */}\n        \n        {/* <PokemonCard dataset={{name: \"miftah\", type:\"water\"}}/> */}\n            {/* <Container> */}\n                {/* test */}\n            {/* </Container> */}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}