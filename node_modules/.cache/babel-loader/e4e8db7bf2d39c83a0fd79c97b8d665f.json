{"ast":null,"code":"import { equal } from \"@wry/equality\";\nimport { isNonEmptyArray, graphQLResultHasError, canUseWeakMap } from \"../utilities/index.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nvar destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();\n\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n  var original = cache[methodName];\n\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);\n      return original.apply(this, arguments);\n    };\n  }\n}\n\nfunction cancelNotifyTimeout(info) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\n\nvar QueryInfo = function () {\n  function QueryInfo(cache) {\n    this.cache = cache;\n    this.listeners = new Set();\n    this.document = null;\n    this.lastRequestId = 1;\n    this.subscriptions = new Set();\n    this.stopped = false;\n    this.dirty = false;\n    this.diff = null;\n    this.observableQuery = null;\n\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  QueryInfo.prototype.init = function (query) {\n    var networkStatus = query.networkStatus || NetworkStatus.loading;\n\n    if (this.variables && this.networkStatus !== NetworkStatus.loading && !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    if (!equal(query.variables, this.variables)) {\n      this.diff = null;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus: networkStatus\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  };\n\n  QueryInfo.prototype.reset = function () {\n    cancelNotifyTimeout(this);\n    this.diff = null;\n    this.dirty = false;\n  };\n\n  QueryInfo.prototype.getDiff = function (variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    if (this.diff && equal(variables, this.variables)) {\n      return this.diff;\n    }\n\n    this.updateWatch(this.variables = variables);\n    return this.diff = this.cache.diff({\n      query: this.document,\n      variables: variables,\n      returnPartialData: true,\n      optimistic: true\n    });\n  };\n\n  QueryInfo.prototype.setDiff = function (diff) {\n    var _this = this;\n\n    var oldDiff = this.diff;\n    this.diff = diff;\n\n    if (!this.dirty && (diff && diff.result) !== (oldDiff && oldDiff.result)) {\n      this.dirty = true;\n\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(function () {\n          return _this.notify();\n        }, 0);\n      }\n    }\n  };\n\n  QueryInfo.prototype.setObservableQuery = function (oq) {\n    var _this = this;\n\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    this.observableQuery = oq;\n\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(this.oqListener = function () {\n        if (_this.getDiff().fromOptimisticTransaction) {\n          oq[\"observe\"]();\n        } else {\n          oq.reobserve();\n        }\n      });\n    } else {\n      delete this.oqListener;\n    }\n  };\n\n  QueryInfo.prototype.notify = function () {\n    var _this = this;\n\n    cancelNotifyTimeout(this);\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach(function (listener) {\n        return listener(_this);\n      });\n    }\n\n    this.dirty = false;\n  };\n\n  QueryInfo.prototype.shouldNotify = function () {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {\n      var fetchPolicy = this.observableQuery.options.fetchPolicy;\n\n      if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  QueryInfo.prototype.stop = function () {\n    if (!this.stopped) {\n      this.stopped = true;\n      this.reset();\n      this.cancel();\n      delete this.cancel;\n      this.subscriptions.forEach(function (sub) {\n        return sub.unsubscribe();\n      });\n      var oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  };\n\n  QueryInfo.prototype.cancel = function () {};\n\n  QueryInfo.prototype.updateWatch = function (variables) {\n    var _this = this;\n\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    var oq = this.observableQuery;\n\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n\n    if (!this.lastWatch || this.lastWatch.query !== this.document || !equal(variables, this.lastWatch.variables)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = {\n        query: this.document,\n        variables: variables,\n        optimistic: true,\n        callback: function (diff) {\n          return _this.setDiff(diff);\n        }\n      });\n    }\n  };\n\n  QueryInfo.prototype.shouldWrite = function (result, variables) {\n    var lastWrite = this.lastWrite;\n    return !(lastWrite && lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && equal(variables, lastWrite.variables) && equal(result.data, lastWrite.result.data));\n  };\n\n  QueryInfo.prototype.markResult = function (result, options, allowCacheWrite) {\n    var _this = this;\n\n    this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n    this.reset();\n\n    if (options.fetchPolicy === 'no-cache') {\n      this.diff = {\n        result: result.data,\n        complete: true\n      };\n    } else if (!this.stopped && allowCacheWrite) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        this.cache.performTransaction(function (cache) {\n          if (_this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: _this.document,\n              data: result.data,\n              variables: options.variables\n            });\n            _this.lastWrite = {\n              result: result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(_this.cache)\n            };\n          } else {\n            if (_this.diff && _this.diff.complete) {\n              result.data = _this.diff.result;\n              return;\n            }\n          }\n\n          var diff = cache.diff({\n            query: _this.document,\n            variables: options.variables,\n            returnPartialData: true,\n            optimistic: true\n          });\n\n          if (!_this.stopped) {\n            _this.updateWatch(options.variables);\n          }\n\n          _this.diff = diff;\n\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  };\n\n  QueryInfo.prototype.markReady = function () {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  };\n\n  QueryInfo.prototype.markError = function (error) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n    this.reset();\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  };\n\n  return QueryInfo;\n}();\n\nexport { QueryInfo };\nexport function shouldWriteResult(result, errorPolicy) {\n  if (errorPolicy === void 0) {\n    errorPolicy = \"none\";\n  }\n\n  var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n  var writeWithErrors = !graphQLResultHasError(result);\n\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n\n  return writeWithErrors;\n}","map":{"version":3,"sources":["/Users/miftahalrasyid/Documents/kerja/personal/Tokopedia/pokeman/node_modules/@apollo/client/core/QueryInfo.js"],"names":["equal","isNonEmptyArray","graphQLResultHasError","canUseWeakMap","NetworkStatus","isNetworkRequestInFlight","destructiveMethodCounts","WeakMap","Map","wrapDestructiveCacheMethod","cache","methodName","original","set","get","apply","arguments","cancelNotifyTimeout","info","clearTimeout","QueryInfo","listeners","Set","document","lastRequestId","subscriptions","stopped","dirty","diff","observableQuery","has","prototype","init","query","networkStatus","loading","variables","setVariables","Object","assign","networkError","graphQLErrors","setObservableQuery","reset","getDiff","updateWatch","returnPartialData","optimistic","setDiff","_this","oldDiff","result","notifyTimeout","setTimeout","notify","oq","oqListener","delete","add","fromOptimisticTransaction","reobserve","shouldNotify","forEach","listener","size","fetchPolicy","options","stop","cancel","sub","unsubscribe","stopPolling","lastWatch","watch","callback","shouldWrite","lastWrite","dmCount","data","markResult","allowCacheWrite","errors","complete","shouldWriteResult","errorPolicy","performTransaction","writeQuery","markReady","ready","markError","error","ignoreErrors","writeWithErrors"],"mappings":"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","sourcesContent":["import { equal } from \"@wry/equality\";\nimport { isNonEmptyArray, graphQLResultHasError, canUseWeakMap, } from \"../utilities/index.js\";\nimport { NetworkStatus, isNetworkRequestInFlight, } from \"./networkStatus.js\";\nvar destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n    var original = cache[methodName];\n    if (typeof original === \"function\") {\n        cache[methodName] = function () {\n            destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);\n            return original.apply(this, arguments);\n        };\n    }\n}\nfunction cancelNotifyTimeout(info) {\n    if (info[\"notifyTimeout\"]) {\n        clearTimeout(info[\"notifyTimeout\"]);\n        info[\"notifyTimeout\"] = void 0;\n    }\n}\nvar QueryInfo = (function () {\n    function QueryInfo(cache) {\n        this.cache = cache;\n        this.listeners = new Set();\n        this.document = null;\n        this.lastRequestId = 1;\n        this.subscriptions = new Set();\n        this.stopped = false;\n        this.dirty = false;\n        this.diff = null;\n        this.observableQuery = null;\n        if (!destructiveMethodCounts.has(cache)) {\n            destructiveMethodCounts.set(cache, 0);\n            wrapDestructiveCacheMethod(cache, \"evict\");\n            wrapDestructiveCacheMethod(cache, \"modify\");\n            wrapDestructiveCacheMethod(cache, \"reset\");\n        }\n    }\n    QueryInfo.prototype.init = function (query) {\n        var networkStatus = query.networkStatus || NetworkStatus.loading;\n        if (this.variables &&\n            this.networkStatus !== NetworkStatus.loading &&\n            !equal(this.variables, query.variables)) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        if (!equal(query.variables, this.variables)) {\n            this.diff = null;\n        }\n        Object.assign(this, {\n            document: query.document,\n            variables: query.variables,\n            networkError: null,\n            graphQLErrors: this.graphQLErrors || [],\n            networkStatus: networkStatus,\n        });\n        if (query.observableQuery) {\n            this.setObservableQuery(query.observableQuery);\n        }\n        if (query.lastRequestId) {\n            this.lastRequestId = query.lastRequestId;\n        }\n        return this;\n    };\n    QueryInfo.prototype.reset = function () {\n        cancelNotifyTimeout(this);\n        this.diff = null;\n        this.dirty = false;\n    };\n    QueryInfo.prototype.getDiff = function (variables) {\n        if (variables === void 0) { variables = this.variables; }\n        if (this.diff && equal(variables, this.variables)) {\n            return this.diff;\n        }\n        this.updateWatch(this.variables = variables);\n        return this.diff = this.cache.diff({\n            query: this.document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: true,\n        });\n    };\n    QueryInfo.prototype.setDiff = function (diff) {\n        var _this = this;\n        var oldDiff = this.diff;\n        this.diff = diff;\n        if (!this.dirty &&\n            (diff && diff.result) !== (oldDiff && oldDiff.result)) {\n            this.dirty = true;\n            if (!this.notifyTimeout) {\n                this.notifyTimeout = setTimeout(function () { return _this.notify(); }, 0);\n            }\n        }\n    };\n    QueryInfo.prototype.setObservableQuery = function (oq) {\n        var _this = this;\n        if (oq === this.observableQuery)\n            return;\n        if (this.oqListener) {\n            this.listeners.delete(this.oqListener);\n        }\n        this.observableQuery = oq;\n        if (oq) {\n            oq[\"queryInfo\"] = this;\n            this.listeners.add(this.oqListener = function () {\n                if (_this.getDiff().fromOptimisticTransaction) {\n                    oq[\"observe\"]();\n                }\n                else {\n                    oq.reobserve();\n                }\n            });\n        }\n        else {\n            delete this.oqListener;\n        }\n    };\n    QueryInfo.prototype.notify = function () {\n        var _this = this;\n        cancelNotifyTimeout(this);\n        if (this.shouldNotify()) {\n            this.listeners.forEach(function (listener) { return listener(_this); });\n        }\n        this.dirty = false;\n    };\n    QueryInfo.prototype.shouldNotify = function () {\n        if (!this.dirty || !this.listeners.size) {\n            return false;\n        }\n        if (isNetworkRequestInFlight(this.networkStatus) &&\n            this.observableQuery) {\n            var fetchPolicy = this.observableQuery.options.fetchPolicy;\n            if (fetchPolicy !== \"cache-only\" &&\n                fetchPolicy !== \"cache-and-network\") {\n                return false;\n            }\n        }\n        return true;\n    };\n    QueryInfo.prototype.stop = function () {\n        if (!this.stopped) {\n            this.stopped = true;\n            this.reset();\n            this.cancel();\n            delete this.cancel;\n            this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n            var oq = this.observableQuery;\n            if (oq)\n                oq.stopPolling();\n        }\n    };\n    QueryInfo.prototype.cancel = function () { };\n    QueryInfo.prototype.updateWatch = function (variables) {\n        var _this = this;\n        if (variables === void 0) { variables = this.variables; }\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return;\n        }\n        if (!this.lastWatch ||\n            this.lastWatch.query !== this.document ||\n            !equal(variables, this.lastWatch.variables)) {\n            this.cancel();\n            this.cancel = this.cache.watch(this.lastWatch = {\n                query: this.document,\n                variables: variables,\n                optimistic: true,\n                callback: function (diff) { return _this.setDiff(diff); },\n            });\n        }\n    };\n    QueryInfo.prototype.shouldWrite = function (result, variables) {\n        var lastWrite = this.lastWrite;\n        return !(lastWrite &&\n            lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n            equal(variables, lastWrite.variables) &&\n            equal(result.data, lastWrite.result.data));\n    };\n    QueryInfo.prototype.markResult = function (result, options, allowCacheWrite) {\n        var _this = this;\n        this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n        this.reset();\n        if (options.fetchPolicy === 'no-cache') {\n            this.diff = { result: result.data, complete: true };\n        }\n        else if (!this.stopped && allowCacheWrite) {\n            if (shouldWriteResult(result, options.errorPolicy)) {\n                this.cache.performTransaction(function (cache) {\n                    if (_this.shouldWrite(result, options.variables)) {\n                        cache.writeQuery({\n                            query: _this.document,\n                            data: result.data,\n                            variables: options.variables,\n                        });\n                        _this.lastWrite = {\n                            result: result,\n                            variables: options.variables,\n                            dmCount: destructiveMethodCounts.get(_this.cache),\n                        };\n                    }\n                    else {\n                        if (_this.diff && _this.diff.complete) {\n                            result.data = _this.diff.result;\n                            return;\n                        }\n                    }\n                    var diff = cache.diff({\n                        query: _this.document,\n                        variables: options.variables,\n                        returnPartialData: true,\n                        optimistic: true,\n                    });\n                    if (!_this.stopped) {\n                        _this.updateWatch(options.variables);\n                    }\n                    _this.diff = diff;\n                    if (diff.complete) {\n                        result.data = diff.result;\n                    }\n                });\n            }\n            else {\n                this.lastWrite = void 0;\n            }\n        }\n    };\n    QueryInfo.prototype.markReady = function () {\n        this.networkError = null;\n        return this.networkStatus = NetworkStatus.ready;\n    };\n    QueryInfo.prototype.markError = function (error) {\n        this.networkStatus = NetworkStatus.error;\n        this.lastWrite = void 0;\n        this.reset();\n        if (error.graphQLErrors) {\n            this.graphQLErrors = error.graphQLErrors;\n        }\n        if (error.networkError) {\n            this.networkError = error.networkError;\n        }\n        return error;\n    };\n    return QueryInfo;\n}());\nexport { QueryInfo };\nexport function shouldWriteResult(result, errorPolicy) {\n    if (errorPolicy === void 0) { errorPolicy = \"none\"; }\n    var ignoreErrors = errorPolicy === \"ignore\" ||\n        errorPolicy === \"all\";\n    var writeWithErrors = !graphQLResultHasError(result);\n    if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n    }\n    return writeWithErrors;\n}\n//# sourceMappingURL=QueryInfo.js.map"]},"metadata":{},"sourceType":"module"}