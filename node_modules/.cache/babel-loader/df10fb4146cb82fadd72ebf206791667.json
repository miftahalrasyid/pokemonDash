{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useContext, useState, useRef, useEffect } from 'react';\nimport { SubscriptionData } from \"../data/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nexport function useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n\n  var _a = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}","map":{"version":3,"sources":["/Users/miftahalrasyid/Documents/kerja/personal/Tokopedia/pokeman/node_modules/@apollo/client/react/hooks/useSubscription.js"],"names":["__assign","useContext","useState","useRef","useEffect","SubscriptionData","getApolloContext","useSubscription","subscription","options","context","updatedOptions","_a","loading","skip","error","undefined","data","result","setResult","subscriptionDataRef","getSubscriptionDataRef","current","subscriptionData","setOptions","afterExecute","cleanup","bind","execute"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,MAA/B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,OAAO,SAASC,eAAT,CAAyBC,YAAzB,EAAuCC,OAAvC,EAAgD;AACnD,MAAIC,OAAO,GAAGT,UAAU,CAACK,gBAAgB,EAAjB,CAAxB;AACA,MAAIK,cAAc,GAAGF,OAAO,GACtBT,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKS,OAAL,CAAT,EAAwB;AAAED,IAAAA,YAAY,EAAEA;AAAhB,GAAxB,CADc,GAC4C;AAAEA,IAAAA,YAAY,EAAEA;AAAhB,GADxE;;AAEA,MAAII,EAAE,GAAGV,QAAQ,CAAC;AACdW,IAAAA,OAAO,EAAE,CAACF,cAAc,CAACG,IADX;AAEdC,IAAAA,KAAK,EAAEC,SAFO;AAGdC,IAAAA,IAAI,EAAED;AAHQ,GAAD,CAAjB;AAAA,MAIIE,MAAM,GAAGN,EAAE,CAAC,CAAD,CAJf;AAAA,MAIoBO,SAAS,GAAGP,EAAE,CAAC,CAAD,CAJlC;;AAKA,MAAIQ,mBAAmB,GAAGjB,MAAM,EAAhC;;AACA,WAASkB,sBAAT,GAAkC;AAC9B,QAAI,CAACD,mBAAmB,CAACE,OAAzB,EAAkC;AAC9BF,MAAAA,mBAAmB,CAACE,OAApB,GAA8B,IAAIjB,gBAAJ,CAAqB;AAC/CI,QAAAA,OAAO,EAAEE,cADsC;AAE/CD,QAAAA,OAAO,EAAEA,OAFsC;AAG/CS,QAAAA,SAAS,EAAEA;AAHoC,OAArB,CAA9B;AAKH;;AACD,WAAOC,mBAAmB,CAACE,OAA3B;AACH;;AACD,MAAIC,gBAAgB,GAAGF,sBAAsB,EAA7C;AACAE,EAAAA,gBAAgB,CAACC,UAAjB,CAA4Bb,cAA5B,EAA4C,IAA5C;AACAY,EAAAA,gBAAgB,CAACb,OAAjB,GAA2BA,OAA3B;AACAN,EAAAA,SAAS,CAAC,YAAY;AAAE,WAAOmB,gBAAgB,CAACE,YAAjB,EAAP;AAAyC,GAAxD,CAAT;AACArB,EAAAA,SAAS,CAAC,YAAY;AAAE,WAAOmB,gBAAgB,CAACG,OAAjB,CAAyBC,IAAzB,CAA8BJ,gBAA9B,CAAP;AAAyD,GAAxE,EAA0E,EAA1E,CAAT;AACA,SAAOA,gBAAgB,CAACK,OAAjB,CAAyBV,MAAzB,CAAP;AACH","sourcesContent":["import { __assign } from \"tslib\";\nimport { useContext, useState, useRef, useEffect } from 'react';\nimport { SubscriptionData } from \"../data/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nexport function useSubscription(subscription, options) {\n    var context = useContext(getApolloContext());\n    var updatedOptions = options\n        ? __assign(__assign({}, options), { subscription: subscription }) : { subscription: subscription };\n    var _a = useState({\n        loading: !updatedOptions.skip,\n        error: undefined,\n        data: undefined\n    }), result = _a[0], setResult = _a[1];\n    var subscriptionDataRef = useRef();\n    function getSubscriptionDataRef() {\n        if (!subscriptionDataRef.current) {\n            subscriptionDataRef.current = new SubscriptionData({\n                options: updatedOptions,\n                context: context,\n                setResult: setResult\n            });\n        }\n        return subscriptionDataRef.current;\n    }\n    var subscriptionData = getSubscriptionDataRef();\n    subscriptionData.setOptions(updatedOptions, true);\n    subscriptionData.context = context;\n    useEffect(function () { return subscriptionData.afterExecute(); });\n    useEffect(function () { return subscriptionData.cleanup.bind(subscriptionData); }, []);\n    return subscriptionData.execute(result);\n}\n//# sourceMappingURL=useSubscription.js.map"]},"metadata":{},"sourceType":"module"}