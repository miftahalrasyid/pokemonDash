{"ast":null,"code":"var _jsxFileName = \"/Users/miftahalrasyid/Documents/kerja/personal/Tokopedia/pokeman/src/PokemonList/PokemonCard.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from \"react-router-dom\";\nimport './PokemonCard.css';\nimport { gql, useQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Container = prop => {\n  const {\n    children\n  } = prop;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n_c = Container;\nconst GET_POKEMON = gql`\n  query pokemon($name: String) {\n    pokemon(name: $name){\n        types{\n          slot\n          type{\n            id\n            url\n            name\n          }\n        }\n        moves{\n          move{\n            url\n            name\n          }\n        }\n        sprites{\n          front_default\n        }\n      }\n  }\n`;\n\nconst PokemonCard = dataset => {\n  _s();\n\n  const scrollpos = React.useRef(null);\n  const [apolloPokemon, setApolloPokemon] = React.useState([]);\n  const [pokemonDetail, setPokemonDetail] = React.useState([]);\n  const [pokemonImage, setPokemonImage] = React.useState(\"\");\n  React.useEffect(() => {\n    // console.log(dataset.url)\n    fetch(dataset.url).then(res => res.json()).then(data => setPokemonDetail(data)); // console.log(scrollpos.scrollTop)\n  }, []);\n  let gqlVariables = {\n    name: \"bulbasaur\"\n  };\n  const {\n    error,\n    data\n  } = useQuery(GET_POKEMON, {\n    variables: gqlVariables\n  });\n  if (error) console.log(`Error! ${error.message}`);\n  console.log(data);\n  React.useEffect(() => {\n    setApolloPokemon(data);\n    console.log(apolloPokemon);\n  }, [data]);\n  React.useEffect(() => {\n    // console.log(dataset.url)\n    if (pokemonDetail.length != 0) {\n      // console.log(pokemonDetail)\n      // console.log(pokemonDetail.sprites)\n      // console.log(pokemonDetail.sprites.other)\n      // console.log(pokemonDetail.sprites.other['official-artwork'])\n      // console.log(pokemonDetail.sprites.other['official-artwork'].front_default)\n      setPokemonImage(pokemonDetail === null || pokemonDetail === void 0 ? void 0 : pokemonDetail.sprites.other['official-artwork'].front_default);\n    }\n  }, [pokemonDetail]);\n\n  const onSelectedClick = ev => {\n    // console.log(\"target\")\n    console.log(ev.target.parentNode.parentNode.id);\n    console.log(ev.target.parentNode.parentNode.id.split('/')); // console.log(ev.target.getBoundingClientRect().y)\n\n    sessionStorage['myScroll'] = ev.target.parentNode.parentNode.id.split('/'); // sessionStorage['myScroll'] = ev.target.getBoundingClientRect().y;\n  };\n\n  if (dataset) {\n    // console.log(dataset)\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      id: \"card-\" + dataset.url.split(\"/\")[6],\n      ref: scrollpos,\n      onClick: onSelectedClick,\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/pokemon/\" + dataset.name,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: pokemonImage,\n          alt: pokemonImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 57\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: dataset.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 101\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this);\n  }\n\n  return {\n    Container\n  };\n};\n\n_s(PokemonCard, \"pWJm2Xgr1R+3tpVT9/7ayrC7fiI=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = PokemonCard;\nexport default PokemonCard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"PokemonCard\");","map":{"version":3,"sources":["/Users/miftahalrasyid/Documents/kerja/personal/Tokopedia/pokeman/src/PokemonList/PokemonCard.js"],"names":["React","Link","gql","useQuery","Container","prop","children","GET_POKEMON","PokemonCard","dataset","scrollpos","useRef","apolloPokemon","setApolloPokemon","useState","pokemonDetail","setPokemonDetail","pokemonImage","setPokemonImage","useEffect","fetch","url","then","res","json","data","gqlVariables","name","error","variables","console","log","message","length","sprites","other","front_default","onSelectedClick","ev","target","parentNode","id","split","sessionStorage"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport './PokemonCard.css';\nimport { gql, useQuery } from '@apollo/client';\n\nexport const Container = (prop) => {\n    const {children} = prop;\n    return (\n    <div className=\"card-container\">\n        {children}\n    </div>\n    )\n}\nconst GET_POKEMON = gql`\n  query pokemon($name: String) {\n    pokemon(name: $name){\n        types{\n          slot\n          type{\n            id\n            url\n            name\n          }\n        }\n        moves{\n          move{\n            url\n            name\n          }\n        }\n        sprites{\n          front_default\n        }\n      }\n  }\n`;\nconst PokemonCard = (dataset) => {\n    const scrollpos = React.useRef(null);\n    const [apolloPokemon,setApolloPokemon] = React.useState([])\n    const [pokemonDetail, setPokemonDetail] = React.useState([])\n    const [pokemonImage,setPokemonImage] = React.useState(\"\");\n    React.useEffect(()=>{\n        // console.log(dataset.url)\n        fetch(dataset.url)\n        .then(res=>res.json())\n        .then(data=>setPokemonDetail(data));\n        // console.log(scrollpos.scrollTop)\n    },[])\n    let gqlVariables = {\n        name: \"bulbasaur\"\n    }\n    const {error,data} = useQuery(GET_POKEMON,{\n        variables: gqlVariables\n    })\n    if (error) console.log( `Error! ${error.message}`);\n    console.log(data);\n    React.useEffect(()=>{\n        setApolloPokemon(data)\n        console.log(apolloPokemon)\n    },[data])\n    React.useEffect(()=>{\n        // console.log(dataset.url)\n        if(pokemonDetail.length!=0){\n            // console.log(pokemonDetail)\n\n            // console.log(pokemonDetail.sprites)\n            // console.log(pokemonDetail.sprites.other)\n            // console.log(pokemonDetail.sprites.other['official-artwork'])\n            // console.log(pokemonDetail.sprites.other['official-artwork'].front_default)\n            setPokemonImage(pokemonDetail?.sprites.other['official-artwork'].front_default)\n        }\n    },[pokemonDetail])\n    const onSelectedClick = (ev) =>{\n        // console.log(\"target\")\n        console.log(ev.target.parentNode.parentNode.id)\n        console.log(ev.target.parentNode.parentNode.id.split('/'))\n        // console.log(ev.target.getBoundingClientRect().y)\n        sessionStorage['myScroll'] = ev.target.parentNode.parentNode.id.split('/');\n        // sessionStorage['myScroll'] = ev.target.getBoundingClientRect().y;\n    }\n    if(dataset){\n        // console.log(dataset)\n        \n        return (\n                <div className=\"card-container\" id={\"card-\"+dataset.url.split(\"/\")[6]} ref={scrollpos} onClick={onSelectedClick}>\n                    \n                    <Link to={\"/pokemon/\"+dataset.name}><img src={pokemonImage} alt={pokemonImage}/><p>{dataset.name}</p></Link>\n                    {/* <Route path=\"/pokemon/:type\" component={GetPokemonDetail}/> */}\n                </div>\n        )\n    }\n    return {Container}\n};\n\nexport default PokemonCard;"]},"metadata":{},"sourceType":"module"}