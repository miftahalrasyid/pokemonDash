{"ast":null,"code":"import _slicedToArray from\"/Users/miftahalrasyid/Documents/kerja/personal/Tokopedia/pokeman/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Users/miftahalrasyid/Documents/kerja/personal/Tokopedia/pokeman/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React from'react';import{Link}from\"react-router-dom\";import'./PokemonCard.css';import{gql,useQuery}from'@apollo/client';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var Container=function Container(prop){var children=prop.children;return/*#__PURE__*/_jsx(\"div\",{className:\"card-container\",children:children});};var GET_POKEMON=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  query pokemon($name: String!) {\\n    pokemon(name: $name){\\n        id\\n        name\\n        moves {\\n          move {\\n            name\\n          }\\n        }\\n        species{\\n            url\\n            name\\n        }\\n        types {\\n            slot\\n          type {\\n              url\\n            name\\n          }\\n        }\\n        sprites{\\n            front_default\\n          }\\n        message\\n        status\\n      }\\n  }\\n\"])));var PokemonCard=function PokemonCard(dataset){var scrollpos=React.useRef(null);var _React$useState=React.useState([]),_React$useState2=_slicedToArray(_React$useState,2),apolloPokemon=_React$useState2[0],setApolloPokemon=_React$useState2[1];var _React$useState3=React.useState([]),_React$useState4=_slicedToArray(_React$useState3,2),pokemonDetail=_React$useState4[0],setPokemonDetail=_React$useState4[1];var _React$useState5=React.useState(\"\"),_React$useState6=_slicedToArray(_React$useState5,2),pokemonImage=_React$useState6[0],setPokemonImage=_React$useState6[1];// React.useEffect(()=>{\n//     // console.log(dataset.url)\n//     fetch(dataset.url)\n//     .then(res=>res.json())\n//     .then(data=>setPokemonDetail(data));\n//     // console.log(scrollpos.scrollTop)\n// },[])\nvar gqlVariables={name:dataset.name};var _useQuery=useQuery(GET_POKEMON,{variables:gqlVariables}),error=_useQuery.error,data=_useQuery.data;if(error)console.log(\"Error! \".concat(error.message));// console.log(data);\nReact.useEffect(function(){var _data$pokemon,_data$pokemon$sprites;// console.log(data?.pokemon || [])\nsetApolloPokemon((data===null||data===void 0?void 0:(_data$pokemon=data.pokemon)===null||_data$pokemon===void 0?void 0:(_data$pokemon$sprites=_data$pokemon.sprites)===null||_data$pokemon$sprites===void 0?void 0:_data$pokemon$sprites.front_default)||[]);// console.log(apolloPokemon)\n// console.log(data?.pokemon?.sprites?.front_default || [])\n},[data]);React.useEffect(function(){// console.log(dataset.url)\nif(pokemonDetail.length!==0){// console.log(pokemonDetail)\n// console.log(pokemonDetail.sprites)\n// console.log(pokemonDetail.sprites.other)\n// console.log(pokemonDetail.sprites.other['official-artwork'])\n// console.log(pokemonDetail.sprites.other['official-artwork'].front_default)\nsetPokemonImage(pokemonDetail===null||pokemonDetail===void 0?void 0:pokemonDetail.sprites.other['official-artwork'].front_default);}},[pokemonDetail]);var onSelectedClick=function onSelectedClick(ev){// console.log(\"target\")\n// console.log(ev.target.parentNode.parentNode.id)\n// console.log(ev.target.parentNode.parentNode.id.split('/'))\n// console.log(ev.target.getBoundingClientRect().y)\nsessionStorage['myScroll']=ev.target.parentNode.parentNode.id.split('/');// sessionStorage['myScroll'] = ev.target.getBoundingClientRect().y;\n};if(dataset){// console.log(dataset)\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"card-container\",id:\"card-\"+dataset.url.split(\"/\")[6],ref:scrollpos,onClick:onSelectedClick,children:/*#__PURE__*/_jsxs(Link,{to:\"/pokemon/\"+dataset.name,children:[/*#__PURE__*/_jsx(\"img\",{src:apolloPokemon,alt:apolloPokemon}),/*#__PURE__*/_jsx(\"p\",{children:dataset.name})]})});}return{Container:Container};};export default PokemonCard;","map":{"version":3,"sources":["/Users/miftahalrasyid/Documents/kerja/personal/Tokopedia/pokeman/src/PokemonList/PokemonCard.js"],"names":["React","Link","gql","useQuery","Container","prop","children","GET_POKEMON","PokemonCard","dataset","scrollpos","useRef","useState","apolloPokemon","setApolloPokemon","pokemonDetail","setPokemonDetail","pokemonImage","setPokemonImage","gqlVariables","name","variables","error","data","console","log","message","useEffect","pokemon","sprites","front_default","length","other","onSelectedClick","ev","sessionStorage","target","parentNode","id","split","url"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport './PokemonCard.css';\nimport { gql, useQuery } from '@apollo/client';\n\nexport const Container = (prop) => {\n    const {children} = prop;\n    return (\n    <div className=\"card-container\">\n        {children}\n    </div>\n    )\n}\nconst GET_POKEMON = gql`\n  query pokemon($name: String!) {\n    pokemon(name: $name){\n        id\n        name\n        moves {\n          move {\n            name\n          }\n        }\n        species{\n            url\n            name\n        }\n        types {\n            slot\n          type {\n              url\n            name\n          }\n        }\n        sprites{\n            front_default\n          }\n        message\n        status\n      }\n  }\n`;\nconst PokemonCard = (dataset) => {\n    const scrollpos = React.useRef(null);\n    const [apolloPokemon,setApolloPokemon] = React.useState([])\n    const [pokemonDetail, setPokemonDetail] = React.useState([])\n    const [pokemonImage,setPokemonImage] = React.useState(\"\");\n    // React.useEffect(()=>{\n    //     // console.log(dataset.url)\n    //     fetch(dataset.url)\n    //     .then(res=>res.json())\n    //     .then(data=>setPokemonDetail(data));\n    //     // console.log(scrollpos.scrollTop)\n    // },[])\n    let gqlVariables = {\n        name: dataset.name\n    }\n    const {error,data} = useQuery(GET_POKEMON,{\n        variables: gqlVariables\n    })\n    if (error) console.log( `Error! ${error.message}`);\n    // console.log(data);\n    React.useEffect(()=>{\n        // console.log(data?.pokemon || [])\n        setApolloPokemon(data?.pokemon?.sprites?.front_default || [])\n        // console.log(apolloPokemon)\n        // console.log(data?.pokemon?.sprites?.front_default || [])\n    },[data])\n    React.useEffect(()=>{\n        // console.log(dataset.url)\n        if(pokemonDetail.length!==0){\n            // console.log(pokemonDetail)\n\n            // console.log(pokemonDetail.sprites)\n            // console.log(pokemonDetail.sprites.other)\n            // console.log(pokemonDetail.sprites.other['official-artwork'])\n            // console.log(pokemonDetail.sprites.other['official-artwork'].front_default)\n            setPokemonImage(pokemonDetail?.sprites.other['official-artwork'].front_default)\n        }\n    },[pokemonDetail])\n    const onSelectedClick = (ev) =>{\n        // console.log(\"target\")\n        // console.log(ev.target.parentNode.parentNode.id)\n        // console.log(ev.target.parentNode.parentNode.id.split('/'))\n        // console.log(ev.target.getBoundingClientRect().y)\n        sessionStorage['myScroll'] = ev.target.parentNode.parentNode.id.split('/');\n        // sessionStorage['myScroll'] = ev.target.getBoundingClientRect().y;\n    }\n    if(dataset){\n        // console.log(dataset)\n        \n        return (\n                <div className=\"card-container\" id={\"card-\"+dataset.url.split(\"/\")[6]} ref={scrollpos} onClick={onSelectedClick}>\n                    \n                    <Link to={\"/pokemon/\"+dataset.name}><img src={apolloPokemon} alt={apolloPokemon}/><p>{dataset.name}</p></Link>\n                    {/* <Route path=\"/pokemon/:type\" component={GetPokemonDetail}/> */}\n                </div>\n        )\n    }\n    return {Container}\n};\n\nexport default PokemonCard;"]},"metadata":{},"sourceType":"module"}