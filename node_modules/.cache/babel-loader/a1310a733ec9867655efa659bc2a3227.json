{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { wrap } from 'optimism';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { isField, resultKeyNameFromField, isReference, makeReference, createFragmentMap, shouldInclude, addTypenameToDocument, getDefaultValues, getFragmentDefinitions, getMainDefinition, getQueryDefinition, maybeDeepFreeze, mergeDeepArray, getFragmentFromSelection } from \"../../utilities/index.js\";\nimport { supportsResultCaching } from \"./entityStore.js\";\nimport { getTypenameFromStoreObject } from \"./helpers.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\n;\n\nfunction missingFromInvariant(err, context) {\n  return new MissingFieldError(err.message, context.path.slice(), context.query, context.clientOnly, context.variables);\n}\n\nvar StoreReader = function () {\n  function StoreReader(config) {\n    var _this = this;\n\n    this.config = config;\n    this.executeSelectionSet = wrap(function (options) {\n      return _this.execSelectionSetImpl(options);\n    }, {\n      keyArgs: function (options) {\n        return [options.selectionSet, options.objectOrReference, options.context];\n      },\n      makeCacheKey: function (selectionSet, parent, context) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, context.varString);\n        }\n      }\n    });\n    this.knownResults = new WeakMap();\n    this.executeSubSelectedArray = wrap(function (options) {\n      return _this.execSubSelectedArrayImpl(options);\n    }, {\n      makeCacheKey: function (_a) {\n        var field = _a.field,\n            array = _a.array,\n            context = _a.context;\n\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(field, array, context.varString);\n        }\n      }\n    });\n    this.config = __assign({\n      addTypename: true\n    }, config);\n  }\n\n  StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n    var store = _a.store,\n        query = _a.query,\n        _b = _a.rootId,\n        rootId = _b === void 0 ? 'ROOT_QUERY' : _b,\n        variables = _a.variables,\n        _c = _a.returnPartialData,\n        returnPartialData = _c === void 0 ? true : _c;\n    var policies = this.config.cache.policies;\n    variables = __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables);\n    var execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: makeReference(rootId),\n      context: {\n        store: store,\n        query: query,\n        policies: policies,\n        variables: variables,\n        varString: JSON.stringify(variables),\n        fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n        path: [],\n        clientOnly: false\n      }\n    });\n    var hasMissingFields = execResult.missing && execResult.missing.length > 0;\n\n    if (hasMissingFields && !returnPartialData) {\n      throw execResult.missing[0];\n    }\n\n    return {\n      result: execResult.result,\n      missing: execResult.missing,\n      complete: !hasMissingFields\n    };\n  };\n\n  StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {\n    if (supportsResultCaching(context.store) && this.knownResults.get(result) === selectionSet) {\n      var latest = this.executeSelectionSet.peek(selectionSet, parent, context);\n\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  StoreReader.prototype.execSelectionSetImpl = function (_a) {\n    var _this = this;\n\n    var selectionSet = _a.selectionSet,\n        objectOrReference = _a.objectOrReference,\n        context = _a.context;\n\n    if (isReference(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: {},\n        missing: [missingFromInvariant(process.env.NODE_ENV === \"production\" ? new InvariantError(4) : new InvariantError(\"Dangling reference to missing \" + objectOrReference.__ref + \" object\"), context)]\n      };\n    }\n\n    var variables = context.variables,\n        policies = context.policies,\n        store = context.store;\n    var objectsToMerge = [];\n    var finalResult = {\n      result: null\n    };\n    var typename = store.getFieldValue(objectOrReference, \"__typename\");\n\n    if (this.config.addTypename && typeof typename === \"string\" && !policies.rootIdsByTypename[typename]) {\n      objectsToMerge.push({\n        __typename: typename\n      });\n    }\n\n    function getMissing() {\n      return finalResult.missing || (finalResult.missing = []);\n    }\n\n    function handleMissing(result) {\n      var _a;\n\n      if (result.missing) (_a = getMissing()).push.apply(_a, result.missing);\n      return result.result;\n    }\n\n    var workSet = new Set(selectionSet.selections);\n    workSet.forEach(function (selection) {\n      var _a;\n\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        var fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference\n        }, context);\n        var resultName = resultKeyNameFromField(selection);\n        context.path.push(resultName);\n        var wasClientOnly = context.clientOnly;\n        context.clientOnly = wasClientOnly || !!(selection.directives && selection.directives.some(function (d) {\n          return d.name.value === \"client\";\n        }));\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            getMissing().push(missingFromInvariant(process.env.NODE_ENV === \"production\" ? new InvariantError(5) : new InvariantError(\"Can't find field '\" + selection.name.value + \"' on \" + (isReference(objectOrReference) ? objectOrReference.__ref + \" object\" : \"object \" + JSON.stringify(objectOrReference, null, 2))), context));\n          }\n        } else if (Array.isArray(fieldValue)) {\n          fieldValue = handleMissing(_this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            context: context\n          }));\n        } else if (!selection.selectionSet) {\n          if (process.env.NODE_ENV !== 'production') {\n            assertSelectionSetForIdValue(context.store, selection, fieldValue);\n            maybeDeepFreeze(fieldValue);\n          }\n        } else if (fieldValue != null) {\n          fieldValue = handleMissing(_this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue,\n            context: context\n          }));\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push((_a = {}, _a[resultName] = fieldValue, _a));\n        }\n\n        context.clientOnly = wasClientOnly;\n        invariant(context.path.pop() === resultName);\n      } else {\n        var fragment = getFragmentFromSelection(selection, context.fragmentMap);\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n    finalResult.result = mergeDeepArray(objectsToMerge);\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(finalResult.result);\n    }\n\n    this.knownResults.set(finalResult.result, selectionSet);\n    return finalResult;\n  };\n\n  StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {\n    var _this = this;\n\n    var field = _a.field,\n        array = _a.array,\n        context = _a.context;\n    var missing;\n\n    function handleMissing(childResult, i) {\n      if (childResult.missing) {\n        missing = missing || [];\n        missing.push.apply(missing, childResult.missing);\n      }\n\n      invariant(context.path.pop() === i);\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map(function (item, i) {\n      if (item === null) {\n        return null;\n      }\n\n      context.path.push(i);\n\n      if (Array.isArray(item)) {\n        return handleMissing(_this.executeSubSelectedArray({\n          field: field,\n          array: item,\n          context: context\n        }), i);\n      }\n\n      if (field.selectionSet) {\n        return handleMissing(_this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          context: context\n        }), i);\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      invariant(context.path.pop() === i);\n      return item;\n    });\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(array);\n    }\n\n    return {\n      result: array,\n      missing: missing\n    };\n  };\n\n  return StoreReader;\n}();\n\nexport { StoreReader };\n\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n  if (!field.selectionSet) {\n    var workSet_1 = new Set([fieldValue]);\n    workSet_1.forEach(function (value) {\n      if (value && typeof value === \"object\") {\n        process.env.NODE_ENV === \"production\" ? invariant(!isReference(value), 6) : invariant(!isReference(value), \"Missing selection set for object of type \" + getTypenameFromStoreObject(store, value) + \" returned for query field \" + field.name.value);\n        Object.values(value).forEach(workSet_1.add, workSet_1);\n      }\n    });\n  }\n}","map":{"version":3,"sources":["/Users/miftahalrasyid/Documents/kerja/personal/Tokopedia/pokeman/node_modules/@apollo/client/cache/inmemory/readFromStore.js"],"names":["__assign","wrap","invariant","InvariantError","isField","resultKeyNameFromField","isReference","makeReference","createFragmentMap","shouldInclude","addTypenameToDocument","getDefaultValues","getFragmentDefinitions","getMainDefinition","getQueryDefinition","maybeDeepFreeze","mergeDeepArray","getFragmentFromSelection","supportsResultCaching","getTypenameFromStoreObject","MissingFieldError","missingFromInvariant","err","context","message","path","slice","query","clientOnly","variables","StoreReader","config","_this","executeSelectionSet","options","execSelectionSetImpl","keyArgs","selectionSet","objectOrReference","makeCacheKey","parent","store","__ref","varString","knownResults","WeakMap","executeSubSelectedArray","execSubSelectedArrayImpl","_a","field","array","addTypename","prototype","diffQueryAgainstStore","_b","rootId","_c","returnPartialData","policies","cache","execResult","JSON","stringify","fragmentMap","hasMissingFields","missing","length","result","complete","isFresh","get","latest","peek","rootTypenamesById","has","process","env","NODE_ENV","objectsToMerge","finalResult","typename","getFieldValue","rootIdsByTypename","push","__typename","getMissing","handleMissing","apply","workSet","Set","selections","forEach","selection","fieldValue","readField","fieldName","name","value","from","resultName","wasClientOnly","directives","some","d","added","Array","isArray","assertSelectionSetForIdValue","pop","fragment","fragmentMatches","add","Object","freeze","set","childResult","i","filter","canRead","map","item","workSet_1","values"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { wrap } from 'optimism';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { isField, resultKeyNameFromField, isReference, makeReference, createFragmentMap, shouldInclude, addTypenameToDocument, getDefaultValues, getFragmentDefinitions, getMainDefinition, getQueryDefinition, maybeDeepFreeze, mergeDeepArray, getFragmentFromSelection, } from \"../../utilities/index.js\";\nimport { supportsResultCaching } from \"./entityStore.js\";\nimport { getTypenameFromStoreObject } from \"./helpers.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\n;\nfunction missingFromInvariant(err, context) {\n    return new MissingFieldError(err.message, context.path.slice(), context.query, context.clientOnly, context.variables);\n}\nvar StoreReader = (function () {\n    function StoreReader(config) {\n        var _this = this;\n        this.config = config;\n        this.executeSelectionSet = wrap(function (options) { return _this.execSelectionSetImpl(options); }, {\n            keyArgs: function (options) {\n                return [\n                    options.selectionSet,\n                    options.objectOrReference,\n                    options.context,\n                ];\n            },\n            makeCacheKey: function (selectionSet, parent, context) {\n                if (supportsResultCaching(context.store)) {\n                    return context.store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, context.varString);\n                }\n            }\n        });\n        this.knownResults = new WeakMap();\n        this.executeSubSelectedArray = wrap(function (options) {\n            return _this.execSubSelectedArrayImpl(options);\n        }, {\n            makeCacheKey: function (_a) {\n                var field = _a.field, array = _a.array, context = _a.context;\n                if (supportsResultCaching(context.store)) {\n                    return context.store.makeCacheKey(field, array, context.varString);\n                }\n            }\n        });\n        this.config = __assign({ addTypename: true }, config);\n    }\n    StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n        var store = _a.store, query = _a.query, _b = _a.rootId, rootId = _b === void 0 ? 'ROOT_QUERY' : _b, variables = _a.variables, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? true : _c;\n        var policies = this.config.cache.policies;\n        variables = __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables);\n        var execResult = this.executeSelectionSet({\n            selectionSet: getMainDefinition(query).selectionSet,\n            objectOrReference: makeReference(rootId),\n            context: {\n                store: store,\n                query: query,\n                policies: policies,\n                variables: variables,\n                varString: JSON.stringify(variables),\n                fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n                path: [],\n                clientOnly: false,\n            },\n        });\n        var hasMissingFields = execResult.missing && execResult.missing.length > 0;\n        if (hasMissingFields && !returnPartialData) {\n            throw execResult.missing[0];\n        }\n        return {\n            result: execResult.result,\n            missing: execResult.missing,\n            complete: !hasMissingFields,\n        };\n    };\n    StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {\n        if (supportsResultCaching(context.store) &&\n            this.knownResults.get(result) === selectionSet) {\n            var latest = this.executeSelectionSet.peek(selectionSet, parent, context);\n            if (latest && result === latest.result) {\n                return true;\n            }\n        }\n        return false;\n    };\n    StoreReader.prototype.execSelectionSetImpl = function (_a) {\n        var _this = this;\n        var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, context = _a.context;\n        if (isReference(objectOrReference) &&\n            !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n            !context.store.has(objectOrReference.__ref)) {\n            return {\n                result: {},\n                missing: [missingFromInvariant(process.env.NODE_ENV === \"production\" ? new InvariantError(4) : new InvariantError(\"Dangling reference to missing \" + objectOrReference.__ref + \" object\"), context)],\n            };\n        }\n        var variables = context.variables, policies = context.policies, store = context.store;\n        var objectsToMerge = [];\n        var finalResult = { result: null };\n        var typename = store.getFieldValue(objectOrReference, \"__typename\");\n        if (this.config.addTypename &&\n            typeof typename === \"string\" &&\n            !policies.rootIdsByTypename[typename]) {\n            objectsToMerge.push({ __typename: typename });\n        }\n        function getMissing() {\n            return finalResult.missing || (finalResult.missing = []);\n        }\n        function handleMissing(result) {\n            var _a;\n            if (result.missing)\n                (_a = getMissing()).push.apply(_a, result.missing);\n            return result.result;\n        }\n        var workSet = new Set(selectionSet.selections);\n        workSet.forEach(function (selection) {\n            var _a;\n            if (!shouldInclude(selection, variables))\n                return;\n            if (isField(selection)) {\n                var fieldValue = policies.readField({\n                    fieldName: selection.name.value,\n                    field: selection,\n                    variables: context.variables,\n                    from: objectOrReference,\n                }, context);\n                var resultName = resultKeyNameFromField(selection);\n                context.path.push(resultName);\n                var wasClientOnly = context.clientOnly;\n                context.clientOnly = wasClientOnly || !!(selection.directives &&\n                    selection.directives.some(function (d) { return d.name.value === \"client\"; }));\n                if (fieldValue === void 0) {\n                    if (!addTypenameToDocument.added(selection)) {\n                        getMissing().push(missingFromInvariant(process.env.NODE_ENV === \"production\" ? new InvariantError(5) : new InvariantError(\"Can't find field '\" + selection.name.value + \"' on \" + (isReference(objectOrReference)\n                            ? objectOrReference.__ref + \" object\"\n                            : \"object \" + JSON.stringify(objectOrReference, null, 2))), context));\n                    }\n                }\n                else if (Array.isArray(fieldValue)) {\n                    fieldValue = handleMissing(_this.executeSubSelectedArray({\n                        field: selection,\n                        array: fieldValue,\n                        context: context,\n                    }));\n                }\n                else if (!selection.selectionSet) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        assertSelectionSetForIdValue(context.store, selection, fieldValue);\n                        maybeDeepFreeze(fieldValue);\n                    }\n                }\n                else if (fieldValue != null) {\n                    fieldValue = handleMissing(_this.executeSelectionSet({\n                        selectionSet: selection.selectionSet,\n                        objectOrReference: fieldValue,\n                        context: context,\n                    }));\n                }\n                if (fieldValue !== void 0) {\n                    objectsToMerge.push((_a = {}, _a[resultName] = fieldValue, _a));\n                }\n                context.clientOnly = wasClientOnly;\n                invariant(context.path.pop() === resultName);\n            }\n            else {\n                var fragment = getFragmentFromSelection(selection, context.fragmentMap);\n                if (fragment && policies.fragmentMatches(fragment, typename)) {\n                    fragment.selectionSet.selections.forEach(workSet.add, workSet);\n                }\n            }\n        });\n        finalResult.result = mergeDeepArray(objectsToMerge);\n        if (process.env.NODE_ENV !== 'production') {\n            Object.freeze(finalResult.result);\n        }\n        this.knownResults.set(finalResult.result, selectionSet);\n        return finalResult;\n    };\n    StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {\n        var _this = this;\n        var field = _a.field, array = _a.array, context = _a.context;\n        var missing;\n        function handleMissing(childResult, i) {\n            if (childResult.missing) {\n                missing = missing || [];\n                missing.push.apply(missing, childResult.missing);\n            }\n            invariant(context.path.pop() === i);\n            return childResult.result;\n        }\n        if (field.selectionSet) {\n            array = array.filter(context.store.canRead);\n        }\n        array = array.map(function (item, i) {\n            if (item === null) {\n                return null;\n            }\n            context.path.push(i);\n            if (Array.isArray(item)) {\n                return handleMissing(_this.executeSubSelectedArray({\n                    field: field,\n                    array: item,\n                    context: context,\n                }), i);\n            }\n            if (field.selectionSet) {\n                return handleMissing(_this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    objectOrReference: item,\n                    context: context,\n                }), i);\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                assertSelectionSetForIdValue(context.store, field, item);\n            }\n            invariant(context.path.pop() === i);\n            return item;\n        });\n        if (process.env.NODE_ENV !== 'production') {\n            Object.freeze(array);\n        }\n        return { result: array, missing: missing };\n    };\n    return StoreReader;\n}());\nexport { StoreReader };\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n    if (!field.selectionSet) {\n        var workSet_1 = new Set([fieldValue]);\n        workSet_1.forEach(function (value) {\n            if (value && typeof value === \"object\") {\n                process.env.NODE_ENV === \"production\" ? invariant(!isReference(value), 6) : invariant(!isReference(value), \"Missing selection set for object of type \" + getTypenameFromStoreObject(store, value) + \" returned for query field \" + field.name.value);\n                Object.values(value).forEach(workSet_1.add, workSet_1);\n            }\n        });\n    }\n}\n//# sourceMappingURL=readFromStore.js.map"]},"metadata":{},"sourceType":"module"}