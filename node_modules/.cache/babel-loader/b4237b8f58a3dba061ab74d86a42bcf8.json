{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { equal } from '@wry/equality';\nimport { execute } from \"../link/core/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, removeConnectionDirectiveFromDocument, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast } from \"../utilities/index.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport { ObservableQuery } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult } from \"./QueryInfo.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var cache = _a.cache,\n        link = _a.link,\n        _b = _a.queryDeduplication,\n        queryDeduplication = _b === void 0 ? false : _b,\n        onBroadcast = _a.onBroadcast,\n        _c = _a.ssrMode,\n        ssrMode = _c === void 0 ? false : _c,\n        _d = _a.clientAwareness,\n        clientAwareness = _d === void 0 ? {} : _d,\n        localState = _a.localState,\n        assumeImmutableResults = _a.assumeImmutableResults;\n    this.clientAwareness = {};\n    this.queries = new Map();\n    this.fetchCancelFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    this.inFlightLinkObservables = new Map();\n    this.cache = cache;\n    this.link = link;\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: cache\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n\n    if (this.onBroadcast = onBroadcast) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(process.env.NODE_ENV === \"production\" ? new InvariantError(12) : new InvariantError('QueryManager stopped while query was in flight'));\n  };\n\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n\n  QueryManager.prototype.mutate = function (_a) {\n    var mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        updateQueries = _a.updateQueries,\n        _b = _a.refetchQueries,\n        refetchQueries = _b === void 0 ? [] : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        updateWithProxyFn = _a.update,\n        _d = _a.errorPolicy,\n        errorPolicy = _d === void 0 ? 'none' : _d,\n        fetchPolicy = _a.fetchPolicy,\n        _e = _a.context,\n        context = _e === void 0 ? {} : _e;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, mutationStoreValue, self;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            process.env.NODE_ENV === \"production\" ? invariant(mutation, 13) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n            process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache', 14) : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\");\n            mutationId = this.generateMutationId();\n            mutation = this.transform(mutation).document;\n            variables = this.getVariables(mutation, variables);\n            if (!this.transform(mutation).hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n\n          case 1:\n            variables = _f.sent();\n            _f.label = 2;\n\n          case 2:\n            mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n              mutation: mutation,\n              variables: variables,\n              loading: true,\n              error: null\n            });\n\n            if (optimisticResponse) {\n              this.markMutationOptimistic(optimisticResponse, {\n                mutationId: mutationId,\n                document: mutation,\n                variables: variables,\n                errorPolicy: errorPolicy,\n                updateQueries: updateQueries,\n                update: updateWithProxyFn\n              });\n            }\n\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              var storeResult;\n              var error;\n              self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false).subscribe({\n                next: function (result) {\n                  if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                    error = new ApolloError({\n                      graphQLErrors: result.errors\n                    });\n                    return;\n                  }\n\n                  if (mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = null;\n                  }\n\n                  if (fetchPolicy !== 'no-cache') {\n                    try {\n                      self.markMutationResult({\n                        mutationId: mutationId,\n                        result: result,\n                        document: mutation,\n                        variables: variables,\n                        errorPolicy: errorPolicy,\n                        updateQueries: updateQueries,\n                        update: updateWithProxyFn\n                      });\n                    } catch (e) {\n                      error = new ApolloError({\n                        networkError: e\n                      });\n                      return;\n                    }\n                  }\n\n                  storeResult = result;\n                },\n                error: function (err) {\n                  if (mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = err;\n                  }\n\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n\n                  self.broadcastQueries();\n                  reject(new ApolloError({\n                    networkError: err\n                  }));\n                },\n                complete: function () {\n                  if (error && mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = error;\n                  }\n\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n\n                  self.broadcastQueries();\n\n                  if (error) {\n                    reject(error);\n                    return;\n                  }\n\n                  if (typeof refetchQueries === 'function') {\n                    refetchQueries = refetchQueries(storeResult);\n                  }\n\n                  var refetchQueryPromises = [];\n\n                  if (isNonEmptyArray(refetchQueries)) {\n                    refetchQueries.forEach(function (refetchQuery) {\n                      if (typeof refetchQuery === 'string') {\n                        self.queries.forEach(function (_a) {\n                          var observableQuery = _a.observableQuery;\n\n                          if (observableQuery && observableQuery.hasObservers() && observableQuery.queryName === refetchQuery) {\n                            refetchQueryPromises.push(observableQuery.refetch());\n                          }\n                        });\n                      } else {\n                        var queryOptions = {\n                          query: refetchQuery.query,\n                          variables: refetchQuery.variables,\n                          fetchPolicy: 'network-only'\n                        };\n\n                        if (refetchQuery.context) {\n                          queryOptions.context = refetchQuery.context;\n                        }\n\n                        refetchQueryPromises.push(self.query(queryOptions));\n                      }\n                    });\n                  }\n\n                  Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                    if (errorPolicy === 'ignore' && storeResult && graphQLResultHasError(storeResult)) {\n                      delete storeResult.errors;\n                    }\n\n                    resolve(storeResult);\n                  }, reject);\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.markMutationResult = function (mutation, cache) {\n    var _this = this;\n\n    if (cache === void 0) {\n      cache = this.cache;\n    }\n\n    if (shouldWriteResult(mutation.result, mutation.errorPolicy)) {\n      var cacheWrites_1 = [{\n        result: mutation.result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables\n      }];\n      var updateQueries_1 = mutation.updateQueries;\n\n      if (updateQueries_1) {\n        this.queries.forEach(function (_a, queryId) {\n          var observableQuery = _a.observableQuery;\n          var queryName = observableQuery && observableQuery.queryName;\n\n          if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n            return;\n          }\n\n          var updater = updateQueries_1[queryName];\n\n          var _b = _this.queries.get(queryId),\n              document = _b.document,\n              variables = _b.variables;\n\n          var _c = cache.diff({\n            query: document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false\n          }),\n              currentQueryResult = _c.result,\n              complete = _c.complete;\n\n          if (complete && currentQueryResult) {\n            var nextQueryResult = updater(currentQueryResult, {\n              mutationResult: mutation.result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables\n            });\n\n            if (nextQueryResult) {\n              cacheWrites_1.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables\n              });\n            }\n          }\n        });\n      }\n\n      cache.performTransaction(function (c) {\n        cacheWrites_1.forEach(function (write) {\n          return c.write(write);\n        });\n        var update = mutation.update;\n\n        if (update) {\n          update(c, mutation.result);\n        }\n      }, null);\n    }\n  };\n\n  QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n    var _this = this;\n\n    var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables) : optimisticResponse;\n    return this.cache.recordOptimisticTransaction(function (cache) {\n      try {\n        _this.markMutationResult(__assign(__assign({}, mutation), {\n          result: {\n            data: data\n          }\n        }), cache);\n      } catch (error) {\n        process.env.NODE_ENV === \"production\" || invariant.error(error);\n      }\n    }, mutation.mutationId);\n  };\n\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n  };\n\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n\n  QueryManager.prototype.resetErrors = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  };\n\n  QueryManager.prototype.transform = function (document) {\n    var transformCache = this.transformCache;\n\n    if (!transformCache.has(document)) {\n      var transformed = this.cache.transformDocument(document);\n      var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));\n      var clientQuery = this.localState.clientQuery(transformed);\n      var serverQuery = forLink && this.localState.serverQuery(forLink);\n      var cacheEntry_1 = {\n        document: transformed,\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery: clientQuery,\n        serverQuery: serverQuery,\n        defaultVars: getDefaultValues(getOperationDefinition(transformed))\n      };\n\n      var add = function (doc) {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry_1);\n        }\n      };\n\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document);\n  };\n\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.transform(document).defaultVars), variables);\n  };\n\n  QueryManager.prototype.watchQuery = function (options) {\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(options.query, options.variables)\n    });\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    var queryInfo = new QueryInfo(this.cache);\n    var observable = new ObservableQuery({\n      queryManager: this,\n      queryInfo: queryInfo,\n      options: options\n    });\n    this.queries.set(observable.queryId, queryInfo);\n    queryInfo.init({\n      document: options.query,\n      observableQuery: observable,\n      variables: options.variables\n    });\n    return observable;\n  };\n\n  QueryManager.prototype.query = function (options) {\n    var _this = this;\n\n    process.env.NODE_ENV === \"production\" ? invariant(options.query, 15) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.');\n    process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document', 16) : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData, 17) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval, 18) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n    var queryId = this.generateQueryId();\n    return this.fetchQuery(queryId, options).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n\n  QueryManager.prototype.clearStore = function () {\n    this.cancelPendingFetches(process.env.NODE_ENV === \"production\" ? new InvariantError(19) : new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    return this.cache.reset();\n  };\n\n  QueryManager.prototype.resetStore = function () {\n    var _this = this;\n\n    return this.clearStore().then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n\n    var observableQueryPromises = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n\n      if (observableQuery && observableQuery.hasObservers()) {\n        var fetchPolicy = observableQuery.options.fetchPolicy;\n        observableQuery.resetLastResults();\n\n        if (fetchPolicy !== 'cache-only' && (includeStandby || fetchPolicy !== 'standby')) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n\n        _this.getQuery(queryId).setDiff(null);\n      }\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n\n    var query = _a.query,\n        fetchPolicy = _a.fetchPolicy,\n        errorPolicy = _a.errorPolicy,\n        variables = _a.variables,\n        _b = _a.context,\n        context = _b === void 0 ? {} : _b;\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, context, variables, false).map(function (result) {\n        if (fetchPolicy !== 'no-cache') {\n          if (shouldWriteResult(result, errorPolicy)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables\n            });\n          }\n\n          _this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors\n          });\n        }\n\n        return result;\n      });\n    };\n\n    if (this.transform(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n\n    return makeObservable(variables);\n  };\n\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchCancelFns.delete(queryId);\n    this.getQuery(queryId).stop();\n    this.queries.delete(queryId);\n  };\n\n  QueryManager.prototype.broadcastQueries = function () {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n\n    var _a;\n\n    if (deduplication === void 0) {\n      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n    }\n\n    var observable;\n    var serverQuery = this.transform(query).serverQuery;\n\n    if (serverQuery) {\n      var _b = this,\n          inFlightLinkObservables_1 = _b.inFlightLinkObservables,\n          link = _b.link;\n\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n\n      if (deduplication) {\n        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n        inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n        var varJson_1 = JSON.stringify(variables);\n        observable = byVariables_1.get(varJson_1);\n\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          byVariables_1.set(varJson_1, observable = concast);\n          concast.cleanup(function () {\n            if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {\n              inFlightLinkObservables_1.delete(serverQuery);\n            }\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n\n    var clientQuery = this.transform(query).clientQuery;\n\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n\n    return observable;\n  };\n\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, allowCacheWrite, options) {\n    var requestId = queryInfo.lastRequestId = this.generateRequestId();\n    return asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function (result) {\n      var hasErrors = isNonEmptyArray(result.errors);\n\n      if (requestId >= queryInfo.lastRequestId) {\n        if (hasErrors && options.errorPolicy === \"none\") {\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: result.errors\n          }));\n        }\n\n        queryInfo.markResult(result, options, allowCacheWrite);\n        queryInfo.markReady();\n      }\n\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: queryInfo.networkStatus || NetworkStatus.ready\n      };\n\n      if (hasErrors && options.errorPolicy !== \"ignore\") {\n        aqr.errors = result.errors;\n      }\n\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n\n      if (requestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n\n      throw error;\n    });\n  };\n\n  QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n    var _this = this;\n\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    var query = this.transform(options.query).document;\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var oldNetworkStatus = queryInfo.networkStatus;\n    var _a = options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n        _b = options.errorPolicy,\n        errorPolicy = _b === void 0 ? \"none\" : _b,\n        _c = options.returnPartialData,\n        returnPartialData = _c === void 0 ? false : _c,\n        _d = options.notifyOnNetworkStatusChange,\n        notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n        _e = options.context,\n        context = _e === void 0 ? {} : _e;\n    var mightUseNetwork = fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\";\n\n    if (mightUseNetwork && notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus)) {\n      if (fetchPolicy !== \"cache-first\") {\n        fetchPolicy = \"cache-and-network\";\n      }\n\n      returnPartialData = true;\n    }\n\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n\n    var fromVariables = function (variables) {\n      normalized.variables = variables;\n      return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n    };\n\n    this.fetchCancelFns.set(queryId, function (reason) {\n      Promise.resolve().then(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast = new Concast(this.transform(normalized.query).hasClientExports ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables) : fromVariables(normalized.variables));\n    concast.cleanup(function () {\n      _this.fetchCancelFns.delete(queryId);\n\n      var nextFetchPolicy = options.nextFetchPolicy;\n\n      if (nextFetchPolicy) {\n        options.nextFetchPolicy = void 0;\n        options.fetchPolicy = typeof nextFetchPolicy === \"function\" ? nextFetchPolicy.call(options, options.fetchPolicy || \"cache-first\") : nextFetchPolicy;\n      }\n    });\n    return concast;\n  };\n\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, options, networkStatus) {\n    var _this = this;\n\n    var query = options.query,\n        variables = options.variables,\n        fetchPolicy = options.fetchPolicy,\n        errorPolicy = options.errorPolicy,\n        returnPartialData = options.returnPartialData,\n        context = options.context;\n    queryInfo.init({\n      document: query,\n      variables: variables,\n      networkStatus: networkStatus\n    });\n\n    var readCache = function () {\n      return queryInfo.getDiff(variables);\n    };\n\n    var resultsFromCache = function (diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n\n      var data = diff.result;\n\n      if (process.env.NODE_ENV !== 'production' && isNonEmptyArray(diff.missing) && !equal(data, {}) && !returnPartialData) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(\"Missing cache result fields: \" + diff.missing.map(function (m) {\n          return m.path.join('.');\n        }).join(', '), diff.missing);\n      }\n\n      var fromData = function (data) {\n        return Observable.of(__assign({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        }, diff.complete ? null : {\n          partial: true\n        }));\n      };\n\n      if (_this.transform(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data);\n        });\n      }\n\n      return fromData(data);\n    };\n\n    var resultsFromLink = function (allowCacheWrite) {\n      return _this.getResultsFromLink(queryInfo, allowCacheWrite, {\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n\n          if (diff.complete) {\n            return [resultsFromCache(diff, queryInfo.markReady())];\n          }\n\n          if (returnPartialData) {\n            return [resultsFromCache(diff), resultsFromLink(true)];\n          }\n\n          return [resultsFromLink(true)];\n        }\n\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n\n          if (diff.complete || returnPartialData) {\n            return [resultsFromCache(diff), resultsFromLink(true)];\n          }\n\n          return [resultsFromLink(true)];\n        }\n\n      case \"cache-only\":\n        return [resultsFromCache(readCache(), queryInfo.markReady())];\n\n      case \"network-only\":\n        return [resultsFromLink(true)];\n\n      case \"no-cache\":\n        return [resultsFromLink(false)];\n\n      case \"standby\":\n        return [];\n    }\n  };\n\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this.cache));\n    }\n\n    return this.queries.get(queryId);\n  };\n\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n\n  return QueryManager;\n}();\n\nexport { QueryManager };","map":{"version":3,"sources":["/Users/miftahalrasyid/Documents/kerja/personal/Tokopedia/pokeman/node_modules/@apollo/client/core/QueryManager.js"],"names":["__assign","__awaiter","__generator","invariant","InvariantError","equal","execute","getDefaultValues","getOperationDefinition","getOperationName","hasClientExports","graphQLResultHasError","removeConnectionDirectiveFromDocument","canUseWeakMap","Observable","asyncMap","isNonEmptyArray","Concast","ApolloError","isApolloError","ObservableQuery","NetworkStatus","isNetworkRequestInFlight","LocalState","QueryInfo","shouldWriteResult","hasOwnProperty","Object","prototype","QueryManager","_a","cache","link","_b","queryDeduplication","onBroadcast","_c","ssrMode","_d","clientAwareness","localState","assumeImmutableResults","queries","Map","fetchCancelFns","transformCache","WeakMap","queryIdCounter","requestIdCounter","mutationIdCounter","inFlightLinkObservables","mutationStore","create","stop","_this","forEach","_info","queryId","stopQueryNoBroadcast","cancelPendingFetches","process","env","NODE_ENV","error","cancel","clear","mutate","mutation","variables","optimisticResponse","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","update","errorPolicy","fetchPolicy","_e","context","mutationId","mutationStoreValue","self","_f","label","generateMutationId","transform","document","getVariables","addExportedVariables","sent","loading","markMutationOptimistic","broadcastQueries","Promise","resolve","reject","storeResult","getObservableFromLink","subscribe","next","result","graphQLErrors","errors","markMutationResult","e","networkError","err","removeOptimistic","complete","refetchQueryPromises","refetchQuery","observableQuery","hasObservers","queryName","push","refetch","queryOptions","query","all","then","cacheWrites_1","data","dataId","updateQueries_1","call","updater","get","diff","returnPartialData","optimistic","currentQueryResult","nextQueryResult","mutationResult","queryVariables","performTransaction","c","write","recordOptimisticTransaction","fetchQuery","options","networkStatus","fetchQueryObservable","promise","getQueryStore","store","info","resetErrors","queryInfo","undefined","has","transformed","transformDocument","forLink","transformForLink","clientQuery","serverQuery","cacheEntry_1","hasForcedResolvers","shouldForceResolvers","defaultVars","add","doc","set","watchQuery","notifyOnNetworkStatusChange","observable","queryManager","init","kind","pollInterval","generateQueryId","finally","stopQuery","String","generateRequestId","stopQueryInStore","stopQueryInStoreNoBroadcast","clearStore","reset","resetStore","reFetchObservableQueries","includeStandby","observableQueryPromises","resetLastResults","getQuery","setDiff","setObservableQuery","startGraphQLSubscription","makeObservable","map","observablePromise_1","observer","sub","unsubscribe","removeQuery","delete","notify","getLocalState","deduplication","inFlightLinkObservables_1","operation","operationName","prepareContext","forceFetch","byVariables_1","varJson_1","JSON","stringify","concast","cleanup","size","of","runResolvers","remoteResult","getResultsFromLink","allowCacheWrite","requestId","lastRequestId","hasErrors","markError","markResult","markReady","aqr","ready","oldNetworkStatus","mightUseNetwork","normalized","assign","fromVariables","fetchQueryByPolicy","reason","nextFetchPolicy","readCache","getDiff","resultsFromCache","missing","warn","m","path","join","fromData","partial","onlyRunForcedResolvers","resolved","resultsFromLink","newContext"],"mappings":"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","sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { equal } from '@wry/equality';\nimport { execute } from \"../link/core/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, removeConnectionDirectiveFromDocument, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, } from \"../utilities/index.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport { ObservableQuery } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult } from \"./QueryInfo.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var cache = _a.cache, link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, onBroadcast = _a.onBroadcast, _c = _a.ssrMode, ssrMode = _c === void 0 ? false : _c, _d = _a.clientAwareness, clientAwareness = _d === void 0 ? {} : _d, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;\n        this.clientAwareness = {};\n        this.queries = new Map();\n        this.fetchCancelFns = new Map();\n        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        this.inFlightLinkObservables = new Map();\n        this.cache = cache;\n        this.link = link;\n        this.queryDeduplication = queryDeduplication;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: cache });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = !!assumeImmutableResults;\n        if ((this.onBroadcast = onBroadcast)) {\n            this.mutationStore = Object.create(null);\n        }\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches(process.env.NODE_ENV === \"production\" ? new InvariantError(12) : new InvariantError('QueryManager stopped while query was in flight'));\n    };\n    QueryManager.prototype.cancelPendingFetches = function (error) {\n        this.fetchCancelFns.forEach(function (cancel) { return cancel(error); });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueries = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, fetchPolicy = _a.fetchPolicy, _e = _a.context, context = _e === void 0 ? {} : _e;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, mutationStoreValue, self;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        process.env.NODE_ENV === \"production\" ? invariant(mutation, 13) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n                        process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache', 14) : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\");\n                        mutationId = this.generateMutationId();\n                        mutation = this.transform(mutation).document;\n                        variables = this.getVariables(mutation, variables);\n                        if (!this.transform(mutation).hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = _f.sent();\n                        _f.label = 2;\n                    case 2:\n                        mutationStoreValue = this.mutationStore &&\n                            (this.mutationStore[mutationId] = {\n                                mutation: mutation,\n                                variables: variables,\n                                loading: true,\n                                error: null,\n                            });\n                        if (optimisticResponse) {\n                            this.markMutationOptimistic(optimisticResponse, {\n                                mutationId: mutationId,\n                                document: mutation,\n                                variables: variables,\n                                errorPolicy: errorPolicy,\n                                updateQueries: updateQueries,\n                                update: updateWithProxyFn,\n                            });\n                        }\n                        this.broadcastQueries();\n                        self = this;\n                        return [2, new Promise(function (resolve, reject) {\n                                var storeResult;\n                                var error;\n                                self.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse: optimisticResponse }), variables, false).subscribe({\n                                    next: function (result) {\n                                        if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                            error = new ApolloError({\n                                                graphQLErrors: result.errors,\n                                            });\n                                            return;\n                                        }\n                                        if (mutationStoreValue) {\n                                            mutationStoreValue.loading = false;\n                                            mutationStoreValue.error = null;\n                                        }\n                                        if (fetchPolicy !== 'no-cache') {\n                                            try {\n                                                self.markMutationResult({\n                                                    mutationId: mutationId,\n                                                    result: result,\n                                                    document: mutation,\n                                                    variables: variables,\n                                                    errorPolicy: errorPolicy,\n                                                    updateQueries: updateQueries,\n                                                    update: updateWithProxyFn,\n                                                });\n                                            }\n                                            catch (e) {\n                                                error = new ApolloError({\n                                                    networkError: e,\n                                                });\n                                                return;\n                                            }\n                                        }\n                                        storeResult = result;\n                                    },\n                                    error: function (err) {\n                                        if (mutationStoreValue) {\n                                            mutationStoreValue.loading = false;\n                                            mutationStoreValue.error = err;\n                                        }\n                                        if (optimisticResponse) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                    complete: function () {\n                                        if (error && mutationStoreValue) {\n                                            mutationStoreValue.loading = false;\n                                            mutationStoreValue.error = error;\n                                        }\n                                        if (optimisticResponse) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        if (error) {\n                                            reject(error);\n                                            return;\n                                        }\n                                        if (typeof refetchQueries === 'function') {\n                                            refetchQueries = refetchQueries(storeResult);\n                                        }\n                                        var refetchQueryPromises = [];\n                                        if (isNonEmptyArray(refetchQueries)) {\n                                            refetchQueries.forEach(function (refetchQuery) {\n                                                if (typeof refetchQuery === 'string') {\n                                                    self.queries.forEach(function (_a) {\n                                                        var observableQuery = _a.observableQuery;\n                                                        if (observableQuery &&\n                                                            observableQuery.hasObservers() &&\n                                                            observableQuery.queryName === refetchQuery) {\n                                                            refetchQueryPromises.push(observableQuery.refetch());\n                                                        }\n                                                    });\n                                                }\n                                                else {\n                                                    var queryOptions = {\n                                                        query: refetchQuery.query,\n                                                        variables: refetchQuery.variables,\n                                                        fetchPolicy: 'network-only',\n                                                    };\n                                                    if (refetchQuery.context) {\n                                                        queryOptions.context = refetchQuery.context;\n                                                    }\n                                                    refetchQueryPromises.push(self.query(queryOptions));\n                                                }\n                                            });\n                                        }\n                                        Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                                            if (errorPolicy === 'ignore' &&\n                                                storeResult &&\n                                                graphQLResultHasError(storeResult)) {\n                                                delete storeResult.errors;\n                                            }\n                                            resolve(storeResult);\n                                        }, reject);\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markMutationResult = function (mutation, cache) {\n        var _this = this;\n        if (cache === void 0) { cache = this.cache; }\n        if (shouldWriteResult(mutation.result, mutation.errorPolicy)) {\n            var cacheWrites_1 = [{\n                    result: mutation.result.data,\n                    dataId: 'ROOT_MUTATION',\n                    query: mutation.document,\n                    variables: mutation.variables,\n                }];\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                this.queries.forEach(function (_a, queryId) {\n                    var observableQuery = _a.observableQuery;\n                    var queryName = observableQuery && observableQuery.queryName;\n                    if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n                        return;\n                    }\n                    var updater = updateQueries_1[queryName];\n                    var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;\n                    var _c = cache.diff({\n                        query: document,\n                        variables: variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _c.result, complete = _c.complete;\n                    if (complete && currentQueryResult) {\n                        var nextQueryResult = updater(currentQueryResult, {\n                            mutationResult: mutation.result,\n                            queryName: document && getOperationName(document) || void 0,\n                            queryVariables: variables,\n                        });\n                        if (nextQueryResult) {\n                            cacheWrites_1.push({\n                                result: nextQueryResult,\n                                dataId: 'ROOT_QUERY',\n                                query: document,\n                                variables: variables,\n                            });\n                        }\n                    }\n                });\n            }\n            cache.performTransaction(function (c) {\n                cacheWrites_1.forEach(function (write) { return c.write(write); });\n                var update = mutation.update;\n                if (update) {\n                    update(c, mutation.result);\n                }\n            }, null);\n        }\n    };\n    QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n        var _this = this;\n        var data = typeof optimisticResponse === \"function\"\n            ? optimisticResponse(mutation.variables)\n            : optimisticResponse;\n        return this.cache.recordOptimisticTransaction(function (cache) {\n            try {\n                _this.markMutationResult(__assign(__assign({}, mutation), { result: { data: data } }), cache);\n            }\n            catch (error) {\n                process.env.NODE_ENV === \"production\" || invariant.error(error);\n            }\n        }, mutation.mutationId);\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n        return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n    };\n    QueryManager.prototype.getQueryStore = function () {\n        var store = Object.create(null);\n        this.queries.forEach(function (info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors,\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.resetErrors = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) {\n            queryInfo.networkError = undefined;\n            queryInfo.graphQLErrors = [];\n        }\n    };\n    QueryManager.prototype.transform = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var transformed = this.cache.transformDocument(document);\n            var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));\n            var clientQuery = this.localState.clientQuery(transformed);\n            var serverQuery = forLink && this.localState.serverQuery(forLink);\n            var cacheEntry_1 = {\n                document: transformed,\n                hasClientExports: hasClientExports(transformed),\n                hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n                clientQuery: clientQuery,\n                serverQuery: serverQuery,\n                defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n            };\n            var add = function (doc) {\n                if (doc && !transformCache.has(doc)) {\n                    transformCache.set(doc, cacheEntry_1);\n                }\n            };\n            add(document);\n            add(transformed);\n            add(clientQuery);\n            add(serverQuery);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign(__assign({}, this.transform(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function (options) {\n        options = __assign(__assign({}, options), { variables: this.getVariables(options.query, options.variables) });\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var queryInfo = new QueryInfo(this.cache);\n        var observable = new ObservableQuery({\n            queryManager: this,\n            queryInfo: queryInfo,\n            options: options,\n        });\n        this.queries.set(observable.queryId, queryInfo);\n        queryInfo.init({\n            document: options.query,\n            observableQuery: observable,\n            variables: options.variables,\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function (options) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(options.query, 15) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' +\n            'in the query option.');\n        process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document', 16) : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData, 17) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval, 18) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n        var queryId = this.generateQueryId();\n        return this.fetchQuery(queryId, options).finally(function () { return _this.stopQuery(queryId); });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function () {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo)\n            queryInfo.stop();\n    };\n    QueryManager.prototype.clearStore = function () {\n        this.cancelPendingFetches(process.env.NODE_ENV === \"production\" ? new InvariantError(19) : new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n        this.queries.forEach(function (queryInfo) {\n            if (queryInfo.observableQuery) {\n                queryInfo.networkStatus = NetworkStatus.loading;\n            }\n            else {\n                queryInfo.stop();\n            }\n        });\n        if (this.mutationStore) {\n            this.mutationStore = Object.create(null);\n        }\n        return this.cache.reset();\n    };\n    QueryManager.prototype.resetStore = function () {\n        var _this = this;\n        return this.clearStore().then(function () {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery && observableQuery.hasObservers()) {\n                var fetchPolicy = observableQuery.options.fetchPolicy;\n                observableQuery.resetLastResults();\n                if (fetchPolicy !== 'cache-only' &&\n                    (includeStandby || fetchPolicy !== 'standby')) {\n                    observableQueryPromises.push(observableQuery.refetch());\n                }\n                _this.getQuery(queryId).setDiff(null);\n            }\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.setObservableQuery = function (observableQuery) {\n        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, errorPolicy = _a.errorPolicy, variables = _a.variables, _b = _a.context, context = _b === void 0 ? {} : _b;\n        query = this.transform(query).document;\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, context, variables, false).map(function (result) {\n                if (fetchPolicy !== 'no-cache') {\n                    if (shouldWriteResult(result, errorPolicy)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: 'ROOT_SUBSCRIPTION',\n                            variables: variables,\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                if (graphQLResultHasError(result)) {\n                    throw new ApolloError({\n                        graphQLErrors: result.errors,\n                    });\n                }\n                return result;\n            });\n        };\n        if (this.transform(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return sub = observable.subscribe(observer); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        this.fetchCancelFns.delete(queryId);\n        this.getQuery(queryId).stop();\n        this.queries.delete(queryId);\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        if (this.onBroadcast)\n            this.onBroadcast();\n        this.queries.forEach(function (info) { return info.notify(); });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n        var _this = this;\n        var _a;\n        if (deduplication === void 0) { deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication; }\n        var observable;\n        var serverQuery = this.transform(query).serverQuery;\n        if (serverQuery) {\n            var _b = this, inFlightLinkObservables_1 = _b.inFlightLinkObservables, link = _b.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication })),\n            };\n            context = operation.context;\n            if (deduplication) {\n                var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n                inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n                var varJson_1 = JSON.stringify(variables);\n                observable = byVariables_1.get(varJson_1);\n                if (!observable) {\n                    var concast = new Concast([\n                        execute(link, operation)\n                    ]);\n                    byVariables_1.set(varJson_1, observable = concast);\n                    concast.cleanup(function () {\n                        if (byVariables_1.delete(varJson_1) &&\n                            byVariables_1.size < 1) {\n                            inFlightLinkObservables_1.delete(serverQuery);\n                        }\n                    });\n                }\n            }\n            else {\n                observable = new Concast([\n                    execute(link, operation)\n                ]);\n            }\n        }\n        else {\n            observable = new Concast([\n                Observable.of({ data: {} })\n            ]);\n            context = this.prepareContext(context);\n        }\n        var clientQuery = this.transform(query).clientQuery;\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function (queryInfo, allowCacheWrite, options) {\n        var requestId = queryInfo.lastRequestId = this.generateRequestId();\n        return asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function (result) {\n            var hasErrors = isNonEmptyArray(result.errors);\n            if (requestId >= queryInfo.lastRequestId) {\n                if (hasErrors && options.errorPolicy === \"none\") {\n                    throw queryInfo.markError(new ApolloError({\n                        graphQLErrors: result.errors,\n                    }));\n                }\n                queryInfo.markResult(result, options, allowCacheWrite);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: queryInfo.networkStatus || NetworkStatus.ready,\n            };\n            if (hasErrors && options.errorPolicy !== \"ignore\") {\n                aqr.errors = result.errors;\n            }\n            return aqr;\n        }, function (networkError) {\n            var error = isApolloError(networkError)\n                ? networkError\n                : new ApolloError({ networkError: networkError });\n            if (requestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n        var _this = this;\n        if (networkStatus === void 0) { networkStatus = NetworkStatus.loading; }\n        var query = this.transform(options.query).document;\n        var variables = this.getVariables(query, options.variables);\n        var queryInfo = this.getQuery(queryId);\n        var oldNetworkStatus = queryInfo.networkStatus;\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        var mightUseNetwork = fetchPolicy === \"cache-first\" ||\n            fetchPolicy === \"cache-and-network\" ||\n            fetchPolicy === \"network-only\" ||\n            fetchPolicy === \"no-cache\";\n        if (mightUseNetwork &&\n            notifyOnNetworkStatusChange &&\n            typeof oldNetworkStatus === \"number\" &&\n            oldNetworkStatus !== networkStatus &&\n            isNetworkRequestInFlight(networkStatus)) {\n            if (fetchPolicy !== \"cache-first\") {\n                fetchPolicy = \"cache-and-network\";\n            }\n            returnPartialData = true;\n        }\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context,\n        });\n        var fromVariables = function (variables) {\n            normalized.variables = variables;\n            return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n        };\n        this.fetchCancelFns.set(queryId, function (reason) {\n            Promise.resolve().then(function () { return concast.cancel(reason); });\n        });\n        var concast = new Concast(this.transform(normalized.query).hasClientExports\n            ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables)\n            : fromVariables(normalized.variables));\n        concast.cleanup(function () {\n            _this.fetchCancelFns.delete(queryId);\n            var nextFetchPolicy = options.nextFetchPolicy;\n            if (nextFetchPolicy) {\n                options.nextFetchPolicy = void 0;\n                options.fetchPolicy = typeof nextFetchPolicy === \"function\"\n                    ? nextFetchPolicy.call(options, options.fetchPolicy || \"cache-first\")\n                    : nextFetchPolicy;\n            }\n        });\n        return concast;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, options, networkStatus) {\n        var _this = this;\n        var query = options.query, variables = options.variables, fetchPolicy = options.fetchPolicy, errorPolicy = options.errorPolicy, returnPartialData = options.returnPartialData, context = options.context;\n        queryInfo.init({\n            document: query,\n            variables: variables,\n            networkStatus: networkStatus,\n        });\n        var readCache = function () { return queryInfo.getDiff(variables); };\n        var resultsFromCache = function (diff, networkStatus) {\n            if (networkStatus === void 0) { networkStatus = queryInfo.networkStatus || NetworkStatus.loading; }\n            var data = diff.result;\n            if (process.env.NODE_ENV !== 'production' &&\n                isNonEmptyArray(diff.missing) &&\n                !equal(data, {}) &&\n                !returnPartialData) {\n                process.env.NODE_ENV === \"production\" || invariant.warn(\"Missing cache result fields: \" + diff.missing.map(function (m) { return m.path.join('.'); }).join(', '), diff.missing);\n            }\n            var fromData = function (data) { return Observable.of(__assign({ data: data, loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus }, (diff.complete ? null : { partial: true }))); };\n            if (_this.transform(query).hasForcedResolvers) {\n                return _this.localState.runResolvers({\n                    document: query,\n                    remoteResult: { data: data },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true,\n                }).then(function (resolved) { return fromData(resolved.data); });\n            }\n            return fromData(data);\n        };\n        var resultsFromLink = function (allowCacheWrite) {\n            return _this.getResultsFromLink(queryInfo, allowCacheWrite, {\n                variables: variables,\n                context: context,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n            });\n        };\n        switch (fetchPolicy) {\n            default:\n            case \"cache-first\": {\n                var diff = readCache();\n                if (diff.complete) {\n                    return [\n                        resultsFromCache(diff, queryInfo.markReady()),\n                    ];\n                }\n                if (returnPartialData) {\n                    return [\n                        resultsFromCache(diff),\n                        resultsFromLink(true),\n                    ];\n                }\n                return [\n                    resultsFromLink(true),\n                ];\n            }\n            case \"cache-and-network\": {\n                var diff = readCache();\n                if (diff.complete || returnPartialData) {\n                    return [\n                        resultsFromCache(diff),\n                        resultsFromLink(true),\n                    ];\n                }\n                return [\n                    resultsFromLink(true),\n                ];\n            }\n            case \"cache-only\":\n                return [\n                    resultsFromCache(readCache(), queryInfo.markReady()),\n                ];\n            case \"network-only\":\n                return [resultsFromLink(true)];\n            case \"no-cache\":\n                return [resultsFromLink(false)];\n            case \"standby\":\n                return [];\n        }\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new QueryInfo(this.cache));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign(__assign({}, newContext), { clientAwareness: this.clientAwareness });\n    };\n    return QueryManager;\n}());\nexport { QueryManager };\n//# sourceMappingURL=QueryManager.js.map"]},"metadata":{},"sourceType":"module"}